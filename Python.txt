i=10
print(i)                            #returns 10

x1=22
y1=11
z1=x1/y1
print(z1)                           #retuns 2

name= 'avrajit'
len(name)                           #returns 7, (note: INDEX starts from '0')
name[2]                             #returns 'r'
name.upper                          #for upper-case
name[-3]                            #returns 'j', shows 3rd letter from the last

mylist = [30, 20, "avra"]           #LIST named as 'mylist' created, 3rd bracket signifies list
print(mylist)
mylist[1]                           #returns 20, as in python index starts from '0'                       
mylist[1] = 99                      #replace 20 by 99
print(mylist)                       #output: 30, 99, 'avra'
mylist.append(10)                   #adds '10' at the end of the list, if printed shows 30, 99, 'avra', 10
mylist.insert (2, 1000)             #inserts '1000' in the 3rd position
mylist.reverse()                    #to get mirror image of the list

dictionary_course = {1: "Python",
                     2: "R",
                     3: "SQL"}      

print(dictionary_course)                     #DICTIONARY created in the name of 'dictionary_course', 2nd bracket for dictionary
dictionary_course[1]                         #returns 'Python'
dictionary_course.get(1)                     #returns 'Python
dictionary_course[4] = "Hadoop"              #adds 'Hadoop' in the 4th position of the dictionary

tuple_animal = (10, 20, "tiger", "lion", "tiger", "cat")              #TUPLE named 'tuple_animal' created
tuple_animal.count("tiger")                                           #returns 2

myset = {10, 20, 30, "tiger", "cat", 10}                              #created a set named 'myset', for set 2nd bracket is required
print(myset)                                                          #returns (20, 'tiger', 10, 'cat', 30)

#TYPE CONVERSION
int()                             #changes any datatype to 'integer'
float()                           #changes any datatype to 'float'
str()                             #changes any datatype to 'charecter string'
tuple()                           #changes any datatype to 'tuple'
list()                            #changes any datatype to 'list'
set()                             #changes any datatype to 'set'
dict()                            #changes any datatype to 'dictionary'

#example
x2 = 12
name = "avrajit"
print (str(x2) + name)            #returns '12avrajit'

#COLLECTIONS in Python
from collections import namedtuple                              #implementing a namedtuple
ax = namedtuple("courses", "course_name, software")             #'course_name' not 'course name' else error
sx = ax("data science", "python")
print(sx)                                                       #returns 'courses(course name="datascience", software="python)'

from collections import namedtuple                              #implementing namedtuple from a list
ax = namedtuple("courses", "course_name, software")
sy = ax._make(["artificial I", "python"])                       #3rd bracket means list
print(sy)                                                       #'underscore' before 'make' is mandatory, returns 'courses(course name="artificial I", software="python)'

from collections import deque                                   #implementing deque
ax1 = ["v", "r", "a", "j"]                                      #list created in the name of 'ax1'
sx1 = deque(ax1)                                                #coverting list into deque
print(sx1)                                                      #returns 'deque("v", "r", "a", "j")
sx1.append("i")                                                 #adds "i" at the end of the deque
sx1.appendleft("a")                                             #adds "a" in the begining
sx1.pop()                                                       #removes "i" from the end
sx1.popleft()                                                   #removes "a" from the begining

from collections import ChainMap                                #python is case sensitive, so write 'ChainMap' carefully
ax2 = {1:"avra", 2:"deepu"}                                      
ay2 = {3:"soumava", 4:"ankana"}                                 #2 dictionaries named ax2 & ay2 were created
sx2 = ChainMap(ax2, ay2)                                        #ChainMapped them into one
print(sx2)

from collections import Counter                                 #'C' of 'Counter' should be in upper-case
ax3 = [1,1,2,3,1,3,2,3,1,4,4,3,4,6,2]                           #list of numbers created with duplicate values
sx3 = Counter(ax3)                                              #to count number of '1, 2, 3, 4, 6' in decending order of repeatations
print(sx3)                                                      #returns 'Counter({1: 4, 3: 4, 2: 3, 4: 3, 6: 1})'
print(list(sx3.elements()))                                     #returns back all values present in the list, '[1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 6]'
print(sx3.most_common())                                        #returns '[(1, 4), (3, 4), (2, 3), (4, 3), (6, 1)]'
cx3 = {1:2, 3:1, 6:1}                                           #assigned a dictionary for using 'subtraction'
print(sx3.subtract(cx3))                                        #subtracting dictionary 'cx3' from 'sx3'
print(sx3.most_common())                                        #subtracted, o/p- '[(2, 3), (3, 3), (4, 3), (1, 2), (6, 0)]'

from collections import OrderedDict                             #'O' & 'D' should be in 'caps'
dx = OrderedDict()                                              #defined an OrderedDict as 'dx'
dx[1] = "a"
dx[2] = "v"
dx[3] = "r"
dx[4] = "a"
dx[5] = "j"
dx[6] = "i"
dx[7] = "t"
print(dx)
print(dx.keys())                                                #returns 'odict_keys([1, 2, 3, 4, 5, 6, 7])'
print(dx.items())                                               #returns 'odict_items([(1, 'a'), (2, 'v'), (3, 'r'), (4, 'a'), (5, 'j'), (6, 'i'), (7, 't')])'

from collections import defaultdict                             #implementing defaultdict
dx2 = defaultdict(int)
dx2[1] = "python"
dx2[2] = "R"
print(dx2)                                                      #returns 'defaultdict(<class 'int'>, {1: 'python', 2: 'R'})'
print(dx2[3])                                                   #returns '0', as 'dx2' has no input. normal dictionary would show an error message instead

#ARRAYS (like vector in 'R', 3 methods are there)
import array                                                    #method 1
ax4 = array.array("i", [1,2,3,4,5,6])                           #'i' is the datatype of the datas present in the array
ax4

import array as ar                                              #method 2, 'ar' is the alias
ax5 = ar.array("i", [1,2,3,4,5,6])
ax5

from array import *                                             #method 3, '*' means all
ax6 = array("i", [1,2,3,4,5,6])
ax6
ax6[2]                                                          #returns '3'

#ARRAY OPERATIONS (length, adding elements, removing elements & slicing)
len(ax5)                                                        #returns 6, number of elements present in array
ax5.append(7)                                                   #adds 7 at the end of the array, returns 'array('i', [1, 2, 3, 4, 5, 6, 7])'
ax5.extend( [8,9,10] )                                          #adds '6,7,8' at the last of the array, returns 'array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])'
ax5.insert (2, 11)                                              #insert 11 at the '2nd index' or the '3rd value', returns 'array('i', [1, 2, 11, 3, 4, 5, 6, 7, 8, 9, 10])'
ax5.pop()                                                       #removes the last element from the array
ax5.pop(2)                                                      #removes the elemt in the '2nd index' i.e. the '3rd value', returns 'array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9])', removes 11
print(ax5[0:3])                                                 #only prints the 1st, 2nd & 3rd value (doesn't print the 'index 3' value), returns 'array('i', [1, 2, 3])'

#ARRAY CONCATENATION (create 2 arrays & an empty array to concatenate them)
import array as ara
ax7 = ara.array ("d", [1,2,3,4])                                #1st array created, 'd' for float value
ax8 = ara.array ("d", [5,6,7,8])                                #2nd array created, 'd' for float value
ax9 = ara.array ("d")                                           #empty array created to concatenate the above 2 arrays
ax9 = ax7 + ax8
print(ax9)

#LOOPING OF ARRAYS (for, while)
#for loop (when number of iterations are known)
for i1 in ax5:
    print(i1)                                                   #both commands must be typed and run in the same cell, else error

for i2 in ax5[0:3]:
    print(i2)                                                   #only after placing the ':', press enter, else will not run

#while loop (interation, condition, increment)
i3=0                                                            #iteration
while i3 < ax5[3]:                                              #condition to print only 4 values
    print(ax5[i3])                                              #if only 'i3' is printed then will only print the iterations
    i3=i3+1                                                     #increment

i4=0
while i4 < len(ax5):
    print(ax5[i4])                                              #to print all values = length of the array
    i4=i4+1

#CREATING DICTIONARIES (using 2 different methods (KEYS & VALUES)
my_dict = {"avra" : "001", "deepu" : "002"}                     #METHOD 1 - dictionary created, "avra" is the KEY, "001" is the value
print(my_dict)
type(my_dict)                                                   #returns 'dict'

my_dict1 = dict(avra ="001", deepu ="002")                      #METHOD 2 - dictionary created
print(my_dict1)
type(my_dict1)                                                  #returns 'dict'
                                                   
#CREATING NESTED DICTIONARY (dictionary inside a dictionary)
emp_dict = {"employee": {"avra": {"id":"001", "last_name":"dey", "salary":"2000"}, "deepu": {"id":"002", "last_name":"nayak", "salary":"3000"}}}
print(emp_dict)

#Operations on HASH-TABLES (KEYS & VALUES)
print(my_dict.keys())                                           #output "(['avra', 'deepu'])"
print(my_dict.values())                                         #output "(['001', '002'])"
print(my_dict.get("deepu"))                                     #output "002"

#Operations on hash-tables using LOOPS
for i5 in my_dict:
    print(i5)                                                   #only prinnts the keys by default, output "avra, deepu"

for i6 in my_dict.values():                                     #only print the values, output "001, 002"
    print(i6)

for i7 in my_dict.items():                                      #prints both
    print(i7)                                                   #output "('avra', '001'), ('deepu', '002')"

#UPDATING data in a dictionary
my_dict["avra"] = "003"                                         #replacing 'values' for a 'key'
my_dict["subha"] = "004"                                        #adding new 'values & keys' in a dictionary
print(my_dict)                                                  #output "{'avra': '003', 'deepu': '002', 'subha': '004'}"
my_dict.pop("deepu")                                            #deleting entries, output "{'avra': '003', 'subha': '004'}"
my_dict.popitem()                                               #remove the last entries (both keys & values)
del my_dict["subha"]                                            #deletes (both keys & values) for "subha"

#CONVERTING DICTIONARY into DATA FRAME
import pandas as ad                                             #'pandas' for data frame, 'ad' is an 'alias'
df = ad.DataFrame(emp_dict["employee"])                         #'ad' is the alias, 'emp_dict' was the NESTED DICTIONARY created earlier
print(df)                                                       #output like data frame table (like in R studio)

#Operations in Python (Arithmetic, Assignment, Comparision, Logical, Membership, Identity, Bit-wise) 
#Arithmetic
x2 = 10                                                         #'x2' variable is assigned a value of 10
y2 = 2                                                          #'y2' variable is assigned a value of 2
x2 + y2                                                         #addition
x2 - y2                                                         #substraction
x2 * y2                                                         #multiplication
x2 / y2                                                         #divison
x2 ** y2                                                        #to the Power (output- 10^2)
x2 // y2                                                        #integer divison (remainder discarded)
x2 % y2                                                         #modulo-division (only remainder is shown)

#Assignment
x2 = 10                                                         # 'x2' variable is assigned a value of 10
x3 += 10                                                        # "x3 = x3 + 10"
x4 -= 10                                                        # "x4 = x3 - 10"
x5 *= 10                                                        # "x5 = x3 * 10"
x6 /= 10                                                        # "x6 = x3 / 10"
x7 **= 10                                                       # "x7 = x3 ^ 10"

#Comparision ( == , != , > , < , >= , <= )
x8 = 20
y8 = 10
compare = x8 == y8                                              #variable 'compare' is assigned if x8 is equal to y8
print(compare)                                                  #returns 'False'

#Condition (if, else & else-if)
if x8 == y8:
    Print("equal")
elif x8 > y8:                                                   #else-if is written as "elif" in Python; allignment should be same as here, else error
         print("greater")
else:                                                           #allignment should be same as here
            print("smaller")

#Logical (AND, OR, NOT)
x8 > 20 and y8 > 5                                              #"AND" operator, should be in lower case, returns 'true' only if both statements are TRUE
x8 > 20 or y8 > 5                                               #returns TRUE, "OR" operator
not(x8 > 20 and y8 > 5)                                         #returns TRUE

Bit-wise (AND, OR, NOT(~), XOR, Left shift, Right shift)
10 & 12                                                         #"AND GATE"-returns 8 (1000), since 10 is (1010) and 12 is (1100), so result will be 1 only if both are 1s
10 | 12                                                         #"OR GATE"-returns 14 (1110), takes 1 if either of the numbers is 1 
10 ^ 12                                                         #"XOR GATE"- returns 6 (0110), if 'two' digits are similar, it takes '0'
12 >> 2                                                         #returns 3 (11), shifts the binary digits to right by 2, since 12 (1100), shifting right by 2 makes it (11)
12 << 2                                                         #returns 48 (110000), shifts the binary digits to left by 2

#LOOPS (FOR, WHILE, NESTED)- in python all pre-test loops
#WHILE LOOPS
i9 = 0                                                          #initializing iteration
while i9 < 10:                                                  #giving condition (print all numbers that is less than 10)
    print("numbers = ", i9)                                     #'numbers = 0'
    i9= i9+1                                                    #increment, loop ended, can't use "break", else will end the loop after printing '0'
print("end of program")                                         #print "end of program" after coming out of the loop

#Guessing game (a random number will be generated till 20, have to guess the number)
import random as rr
n1 = 20
to_be_guessed = int (n1 * rr.random()) + 1
i10 = 0
while i10 != to_be_guessed:
    i10 = int(input ("type a number = "))
    if i10 > 0:
        if i10 > to_be_guessed:
            print("number is too large")
        elif i10 < to_be_guessed:
            print("number is too small")
        else:
            print("you lose")
            break
    else:
         print("congrats- you won")                            #check notebook for explaination

#FOR LOOPS
fruits = ["mango", "grapes", "Apple"]
for i11 in fruits:                                             #no need to increment counter like 'while' loop, else error         
    print(i11)
print("end of program")                                        #output - "mango grapes apple end_of_program"

n2 = int(input("factorial of "))                               #input the number whose factorial you want
fact =1                                                        #assigning value '1' to variable  'fact'
if n2 < 0: 
    print("enter a positive number")
elif n2 == 0:
    print("factorial is 1")
else:
    for r in range(1, n2+1):                                   #range from '1 to n2', do not include 'n2+1'
        fact = fact * r                                        #multiplying all the numbers that fals in the range with 'fact=1'
print("factorial is ", fact)                                   #print only after you are out of the loop, else will print all value in the range

#NESTED LOOPS (loop inside another loop)
#Print the 'set of all the numbers' that satisfies Pythogorian nos. upto a given i/p range (Pythogorian- which follows a^2 + b^2 = c^2

from math import sqrt                                          #"math" module is required to perform 'sqrt' function
n3 = int(input("enter the range "))                            #range for which sets of Pythogorian numbers are to be obtained
for a1 in range(1, n3+1):                                      #range of 'a1' is from '1 to n3'
    for b1 in range(a1, n3):                                   #range of 'b1' has to be from 'a1 to (n3-1)', else for 5 will give both "(4^2 + 3^2)" & "(3^2 + 4^2)"
        c1_square = a1 ** 2 + b1 ** 2
        c1 = int(sqrt(c1_square))
        if c1_square == c1 ** 2:                               #to say that "c_square" is equal to "c^2"
            print(a1, b1, c1)                                  #don't come out of the loop

#Ticket booking of number of passengers that is manually input, with information (name, age & sex)
travelling = input("y or n \n")
while travelling == "y":
    n4 = int(input("no of people travelling: "))
    for n4 in range (1, n4+1):
        name = input("enter name of the passenger: ")
        age = input("enter age of the passenger: ")
        sex = input("m or f: ")
        print(name)
        print(age)
        print(sex)
    travelling = input("forgot someone? \n")                   #this line should be outside the the loop, else will ask after entering the details of 1 passenger

#ATM program on other file (OR check the note-book)
#For PATTERNS check another file

#File handling
#READING a TEXT file
import os
file = open("C:/Users/Administrator/Downloads/sum.txt", "r")
print(file.read())
file.close()

#READ LINES of a text file using 'for' loop
import os
file = open("C:/Users/Administrator/Downloads/edit.txt", "r")
for line in file:
    print(file.readlines())
file.close()

#To WRITE in a file ("w" function overwrites, need to use APPEND ("a") for adding lines in the file)
import os
file = open("C:/Users/Administrator/Downloads/edit.txt", "w")
file.write("Hello Kolkata \n")
file.write("My name is Avrajit")
file.close()

#CREATING A FILE using python and WRITING on it
import os
file = open("C:/Users/Administrator/Downloads/new.txt", "x")
file.write("Hi I am Avra")
file.close()

#DELETING/ REMOVING a file permanently using python
import os
os.remove("C:/Users/Administrator/Downloads/new.txt")
file.close()

#DELETING/ REMOVING a FOLDER/ DIRECTORY permanently using python
import os
os.rmdir("C:/Users/Administrator/Downloads/New folder")
file.close()

#Defining FUNCTION (FUNCTION inside a FUNCTION)
def func(n5):                                                 #name of the function is "n5"
    def func5():
        return ("Hi")
    def func6():
        return ("I'm Avra")
    if n5 == 1:
        return func5
    else:
        return func6
a2 = func(1)
b2 = func(2)                                                  #can be anything other than "1"
print(a2(), b2())                                             #output- 'Hi I'm Avra'

#LAMBDA/ ANONYMOUS/ NAMELESS/ THROW-AWAY functions
mx = lambda a3: (a3 * a3)
mx(3)                                                         #returns 9, code ended in 2 lines, if a function were to be defined it would have taken 4 lines

#LAMBDA functions within user-defined functions
def abb(x9):                                                  #an user-defined function is defined by the name of "abb"
    return (lambda y9: (x9 +y9))
t = ami(4)
print(t(-12))

#FILTER FUNCTION (filter out data from iterables (e.g. lists)
mylist1 = [1, 2, 3, 4, 5, 6, 7]
new_list = list(filter(lambda a4: (a4/3 == 2), mylist1))
print(new_list)                                                                                                          #output- 6

def fi (a12):                                                                                                            #an used-defined function is created in the name of 'fi'
    if a12 >=3:
        return a12
gx5 = tuple(filter(fi, [1,2,3,4,5,6,7]))                                                                                 #'list' is given as an input, but output will be a 'tuple'
print(gx5)                                                                                                               #output- "(3, 4, 5, 6, 7)"

#MAP FUNCTION (returns a new list)
mylist1 = [1, 2, 3, 4, 5, 6, 7]                                                                                          #same as the list used in filter
newlist2 =list(map(lambda a5: (a5/3 != 2), mylist1))
print(newlist2)                                                                                                          #output- "[True, True, True, True, True, False, True]"

def ma (a10):                                                                                                            #a function is defined as 'mapping'
    return a10*a10
gx3 = list(map(ma, [1,2,3,4]))
print(gx3)                                                                                                               #output- "[1, 4, 9, 16]"

def ma1 (a11, b11):
    return a11*b11
gx4 = list(map(ma1, [1,2,3,4], [5,6,7,8]))
print(gx4)                                                                                                               #output- "[5, 12, 21, 32]"

REDUCE FUNCTION
from functools import reduce                                                                                             #syntax- "reduce(variables, equation, input)"
reduce (lambda a6,b6: (a6+b6), [1, 2, 3, 4, 5, 6, 7])                                                                    #output- 28, first add '1 & 2', then adds ists result with next element '3' and so on

from functools import reduce                                                                                             #syntax- "reduce(fn. name, input)"
def re (a13, b13):
    return (a13 + b13)                                                                                                   #x+y
gx6 = reduce(re, [1,2,3,4])                                  
print(gx6)                                                                                                               #output- 10

#FILTER FUNCTION inside MAP FUNCTION
gx7 = map(lambda a14: (2*a14), filter(lambda b14: (b14>=3), [1,2,3,4]))                                                  #'3 & 4' are filtered in and map function is used to multiply them with 2 
print(tuple(gx7))                                                                                                        #output- "(6, 8)"

#MAP FUNCTION inside FILTER FUNCTION
gx8 = filter(lambda a15: (a15>=7), map(lambda b15: (2*b15), [1,2,3,4,5,6]))
print(list(gx8))                                                                                                         #output- "[8, 10, 12]"

#MAP & FILTER FUNCTION inside REDUCE FUNCTION
gx9 = reduce(lambda a16,b16: (a16+b16), map(lambda a16: (a16+a16), filter(lambda b16: (b16>=4), [1,2,3,4,5,6])))         #'4,5 & 6' are filtered in, mapped into '8,10 & 12'
print(gx9)                                                                                                               #output- 30, '8,10,12' were added to get 30

#ALGEBRAIC equations using LAMBDA function
gx = lambda a7: (a7 * a7)                                    #solving- x^2
gx(8)                                                        #output- 64

gx1 = lambda a8,b8: (3*a8) + (4*b8)                          #sloving- (3x+4y) 
gx1(4,7)                                                     #output- 40

gx2 = lambda a9,b9: (a9 + b9) ** 2                           #solving (a+b)^2
gx2(3,2)                                                     #output- 25

#GENERATORS                                                  #a function is defined by the name of 'gen'
def gen (dict1):                                        
    for q,r in dict1.items():                                #store two items of a dictionary, items- key & value pairs
        yield q,r
a17 = {1: "Hi", 2: "Welcome"}                                #'dict 1' is given to be 'a17'
b17 = gen(a17)                                               #b is the function(a)
print(b17)                                                   #no output, as generator only gives output with 'next' command
next(b17)                                                    #output- {1: Hi}
next(b17)                                                    #output- {2: Welcome}, will give an error message if we use another 'next' since only 2 items are present                                                            

def gen1 (a18):                                              #function name 'gen1'
    while a18 <= 4:
        yield a18
        a18 = a18 + 1                                        #increment is absolutely necessary in 'while' loops
b18 = gen1(2)                                                #the value of 'a18' is given as '2'   
next(b18)                                                    #output- 2
next(b18)                                                    #output- 3
next(b18)                                                    #output- 4
next(b18)                                                    #output- 'error message', as condition given to be '<= 4'

def gen2():                                                  #empty function
    a19 = 3                                                  #assigned value = 3
    yield a19
    a19 = a19 * a19                                          #assigned value = 3*3                     
    yield a19
b19 = gen2()
next(b19)                                                    #output- 3
next(b19)                                                    #output- 9, again 'next' will give an error

#GENERATORS with LOOPS
def gen2():                                                 
    a19 = 3                                                 
    yield a19
    a19 = a19 * a19                                            
    yield a19
b19 = gen2()                                                #same as the previous program
for c19 in b19:
    print(c19)                                              #output 3,9

#GENERATOR EXPRESSIONS
gx10 = range(6)                                             #another way to define range (0 to 5)
print("numbers", end=":")                                   #"    numbers:    "
a20 = [m+2 for m in gx10]                                   #equation, can put in ()brackets as well which will give the 'generator expression'
print(a20)                                                  #output- "numbers:[2, 3, 4, 5, 6, 7]"
print("generator expression", end=":")
b20 = (m+2 for m in gx10)                                   #now equation put in ()bracket (GENERATOR EXPRESSION)
print(b20)                                                  #output- "generator expression:<generator object <genexpr> at 0x00000240802CA4A0>"
for n6 in b20:
    print(n6)                                               #output- "2, 3, 4, 5, 6, 7", but veritically arranged

#using GENERATORS to print FIBONACCI series
def fib():
    a21, b21 = 0, 1                                         #two variables are taken (a,b)and assigned avalue of (0,1) respectively
    while True:
        yield a21                                           #print '0' first, value of 'a'                                       
        a21, b21 = b21, a21+b21                             #value of 'b' becomes value of 'a' & value of 'a+b' becomes the value of 'b'
for gx11 in fib():
    if gx11 > 50:                                           #stop if sumation becomes more than 50
        break
    print(gx11)                                             #output- "0 1 1 2 3 5 8 13 21 34 "

#NUMBER STREAM using generator expression
a22 = range(10)                                             #range (0 to 9)
b22 = (m for m in a22)                                      #GENERATOR EXPRESSION, wont give output if 'b22' is printed
for gx12 in b22:
    print(gx12, end=" ")                                    #output- "0 1 2 3 4 5 6 7 8 9 ", will print vertically if not ended with 'space'

a23 = range(2, 10, 2)                                       #range (2 to 10) with a difference of '2'
b23 = (m for m in a23)                                      #GENERATOR EXPRESSION, wont give output if 'b23' is printed
for gx13 in b23:
    print(gx13, end=" ")                                    #output- "2 4 6 8 ", even numbers only, will print vertically if not ended with 'space'

#OOPS (object oriented programing system- eg- 'employee' is 'class' & 'Avra & Deepu' are objects)
class cars():                                               #class is "cars" or 'name of the class' here
    pass
honda = cars()                                              #objects are "honda & tata"                                        
tata = cars()
honda.model_name = "City"
honda.manufacture_date = "2017"
honda.price = 10000
tata.model_name ="Manza"
tata.manufacture_date = "2016"
tata.price = 6000
print(honda.price)                                          #output- 10000
print(honda.__dict__)                                       #output- "{'model_name': 'City', 'manufacture_date': '2017', 'price': 10000}"

#SHORTCUT of the previous program using FUNCTION
class cars():
    def __init__(self, model_name, manufacture_date, price):     #after 'def', 'space' is there
        self.model_name = model_name
        self.manufacture_date = manufacture_date
        self.price = price
honda = cars("City", "2017", 10000)
tata = cars("manza", "2016", 6000)
print(honda.price)
print(honda.__dict__)                                            #same output as the previous program

#MODULES in python (Python MODULES)
def add (u,v):
    return (u+v)
def sub (u,v):
    return (u-v)
def mul (u,v):
    return (u*v)
def div (u,v):
    return (u/v)                                                 #create a new file and save the file in the name of "calculator.py" after writing this program
import calculator as calc                                        #open a new python file and write this program to run it
addition = calc.add(10,15)                                       #new variable in the name of "addition" is taken
print(addition)                                                  #output- 25

#Built-in MODULES (MODULES which pre-exist in Python)- written in C, iterpreted by Python interpreter
import sys
zz= sys.builtin_module_names
print(zz)                                                        #to get a list of all built-in modules in python
help("modules")                                                  

from matplotlib import pyplot
print(dir(pyplot))                                               #to see what are the contents available in the 'module, pyplot'

import math
print(math.  )                                                   #use in "spyder" IDE to check what functions are available in math function

import calculator
print(dir(calculator))                                           #to see what are the contents available in the 'module, calculator', that was just created earlier

#Python plots
from matplotlib import pyplot as plt                             #BAR PLOT
plt.bar([0.25,1.25,2.25,3.25,4.25],                              #"x-axis" values
        [50,40,70,80,20],                                        #"y-axis" values
        label = "BMW",                                           #name of the plot (BMW)
        color = "r",                                             #"color" NOT "colors"
        width = 0.5)                                             #thickness of the bars
plt.legend()                                                     #to write the name of the "name of the plot" inside the barplot
plt.xlabel("Days")                                               #name of x-axis
plt.ylabel("Distance")                                           #name of y-axis
plt.title("Car Data")                                            
plt.show()                                                       #print the barplot

from matplotlib import pyplot as plt                             #PIE PLOT
population = [2000, 1600, 900, 725]                              #variable- "population"
religion = ["Hindus", "Muslims", "Christans", "Others"]          #variable- "religion"
col = ["b", "g", "r", "c"]                                       #variable- "col"
plt.pie(population,                                              #pie-plot of the variable "population"
       labels = religion,                                        #for religion no (" ") required since its a variable
       colors = col,                                             #to give different "colors" to the pie-plot, here "colors not color"
       startangle = 90,                                          #pie-plot will start from "NORTH" direction or "90 degree"
       explode =(0, 0.1, 0, 0),                                  #gap between the borders, since 4 "religions" are present so 4 values
       autopct = "%1.1f%%")                                      #to give "percentages" of the values       
plt.title("Pie plot of population density")
plt.show()                                                       #print the pie-plot

#TIME module
import time as ti                                                #importing the "time" module
ti.time()                                                        #output- "1613845802.3676722", numbers of seconds passed from '1st jan 1970'
ti.ctime(1613845802.3676722)                                     #output- "Sun Feb 21 00:00:02 2021", current date & time
ti.strftime("%d/ %m/ %y")                                        #output- "21/ 02/ 21"

#DATE-TIME module
import datetime as dt                                            #importing "datetime" module
uy = (dt.datetime(2021, 9, 23, 4, 30))                           #year,month,day,hours,minuites
print(uy)                                                        #output- "2021-09-23 04:30:00"

dt.datetime.today()                                              #output- "2021, 2, 21, 0, 19, 50, 302378"; 21st feb 2021, 12 hours 19 mins 50 seconnds & milliseconds

uy1 = dt.timedelta (days = 20)                                   #"time-delta" function is used to get the differcence between date & times
uy2 = dt.timedelta (days = 30)
uy3 = (uy2 - uy1)
print(uy3)                                                       #output- "10 days, 0:00:00"

#NUMPY module
import numpy as np                                               #importing the "NUMPY" module
a24 = np.array( [(1,2,3), (4,5,6)] )                             #creating a 2-dimensional array
print(a24)                                                       #output- (2,3) array/matrix
print(a24.ndim)                                                  #output- 2, as 2-dimensional array
print(a24.dtype)                                                 #returns- "int32", datatype of the array
print(a24.size)                                                  #returns- 6, number of elements present
print(a24.shape)                                                 #returns- (2, 3), dimension of the array
print(a24.max())                                                 #returns- 6, maximum value
print(a24.sum())                                                 #returns- 21, sum of all the values
print(np.sqrt(a24))                                              #prints square-root of all the elements in the array
print(np.std(a24))                                               #returns- "1.70782", standard-deviation of the elemts in the array

#SUM of ROWS & COLUMNS (Rows are called AXIS 1, Columns are called AXIS 0)
print(a24.sum(axis = 1))                                         #returns (6 15), sum of rows (1+2+3) & (4+5+6)
print(a24.sum(axis = 0))                                         #returns (5 7 9), sum of columns (1+4) & (2+5) & (3+6)
  
#RESHAPE & SLICING using NUMPY
import numpy as np
a25 = np.array( [ (1,2,3,4), (5,6,7,8) ] )                       #(2,4) array
b25 = a25.reshape(4,2)                                           #like transverse of matrix
print(b25)                                                       #(4,2) array

print(a25[0,2])                                                  #slicing- getiing '3' using index, in python indexing starts from '0'
print(a25[0: ,2])                                                #slicing- getting '3 & 7' both

#Operations on ARRAYS
import numpy as np
a26 = np.array([(1,2), (5,12)])
b26 = np.array([(20,15), (10,3)])
print(a26 + b26)                                                 #sum of arrays
print(a26 * b26)                                                 #NOT LIKE MATRIX MULTIPLICATION, multiplies each element with other

print(np.vstack((a26,b26)))                                      #combine both the arrays into (4x2) order
print(np.hstack((a26,b26)))                                      #combine both the arrays into (2x4) order

#SPECIAL operations on ARRAYS
import numpy as np
a27 = np.array([1,2,3])
print(np.exp(a27))                                               #returns exponential of (1,2,3), output- "[ 2.71828 7.3890 20.08553]"
print(np.log(a27))                                               #returns 'log base e' of (1,2,3), output- "[0     0.69314   1.09861]"
print(np.log10(a27))                                             #returns 'log base 10' of (1,2,3), output- "[0     0.30103    0.47712]"

import numpy as np
import matplotlib.pyplot as plt
a28 = np.arange(0, 3* np.pi, 0.1)                                #variable defined as 'x = 0 to 3pi' with interval of '0.1'
b28 = np.sin(a28)                                                #sin(x)
plt.plot(a28, b28)                                               #sin(x) vs x
plt.show()

c28 = np.tan(a28)                                                #tan(x)
plt.plot(a28, c28)                                               #tan(x) vs x
plt.show()

#SCI-PY module
from scipy import cluster
help(cluster)                                                    #to get information on the cluster module

#SPECIAL module in scipy
from scipy import special 
a29 = special.exp10(2)                                           #exponent function(to the power of)
print(a29)                                                       #returns 100, (10^2)
b29 = special.exp2(3)
print(b29)                                                       #returns 8, (2^3)

c29 = special.sindg(30)                                          #'sine degree' function
print(c29)                                                       #returns '0.49999999999999994', as 'sin(30)' is '1/2' or '0.5'

#INTEGRATE module in scipy
from scipy import integrate
a30 = scipy.integrate.quad(lambda x: special.exp10(x), 0 ,1)     #integration of (10^x) from limit (0 to 1)
print(a30)                                                       #returns- "(3.9086503371292665, 4.3394735994897923e-14)"

#DISCRETE FOURIER TRANSFORM (fftpack)
from scipy.fftpack import fft, ifft                              #Fourier transform & inverse-fourier transform
import numpy as np                                               #to create an array of discrete numbers
a31 = np.array([1,2,3,4])
b31 = fft(a31)
print(b31)                                                       #returns- "[10 -2+2j -2 -2-2j]"
print(ifft(b31))                                                 #returns- "[1+0j 2+0j 3-0j 4+0j]"

#LINEAR ALGEBRAS (MATRIX)
from scipy import linalg                                         #import "linalg" sub-module for using LINEAR ALGEBRA
import numpy as np
a32 = np.array([(1,2), (3,4)])                                   #array but considered as matrix
b32 = linalg.inv(a32)                                            #inverse of the 'matrix (a)'
print(b32)                                                       #returns inverse of the matrix

#PANDAS (Data manipulation & analysis)
import pandas as pd                                              #importing panda module
cars1 = {"Name": ["Mercedez","Tata","Kia","Ferarri","Toyota"],   
         "Milage": [10,20,13,9,16], 
         "CC": [2000,1200,1500,2500,1700]}                       #creating a dictionary named "cars1"
df = pd.DataFrame(cars1)                                         #creating a DATA FRAME
print(df)

#SLICING of DATA FRAMES using Pandas
print(df.head(2))                                                #shows only first 2 rows of the previously created data frame
print(df.tail(2))                                                #shows only last 2 rows of the previously created data frame

#MERGING of Data Frames using Pandas (DIFFERENT INDEX value)
import pandas as pd                                              #'PANDAS' module is imported as 'pd'
df1 = pd.DataFrame( {"HPI":[80,90,70,60],
                     "int_rate":[2,1,2,3],
                     "GDP":[50,45,45,67] },
                     index = [2001,2002,2003,2004] )             #data frame is created and named as 'df1'
print(df1)                                                       #the dictionary is printed as data frame, but instead of index(0,1,...), index is (2001,2002...)
df2 =pd.DataFrame( {"HPI":[80,90,70,60],              
                    "int_rate":[2,1,2,3],
                    "GDP":[50,45,45,67] },
                     index = [2005,2006,2007,2008] )             #another data frame is created and named as 'df2'
merge1 = pd.merge(df1, df2)                                       
print(merge1)                                                    #data frame is printed but the index column is not present, as whatever row is common between 2 data frames will be printed
merge2 = pd.merge(df1, df2, on= "HPI")
print(merge2)                                                    #columns printed are "((HPI, int_rate_x, GDP_x, int_rate_y, GDP_y))"

#JOINING of Data Frames (if they have SAME INDEX value)
import pandas as pd
df3 = pd.DataFrame( {"HPI_x":[80,90,70,60],                      
                     "int_rate_x":[2,1,2,3],
                     "GDP_x":[50,45,45,67] },
                     index = [2001,2002,2003,2004] )             
df4 =pd.DataFrame( {"HPI_y":[80,90,70,60],
                    "int_rate_y":[2,1,2,3],
                    "GDP_y":[50,45,45,67] },
                     index = [2001,2003,2004,2005] )
joined = df3.join(df4)
print(joined)                                                    #both the data frames are joined based on their index value

#CHANGING INDEX OF DATA FRAME
import pandas as pd
cars1 = {"Name": ["Mercedez","Tata","Kia","Ferarri","Toyota"],   
         "Milage": [10,20,13,9,16], 
         "CC": [2000,1200,1500,2500,1700]}
df = pd.DataFrame(cars1)                                         #data frame "df" which was previously used was copied
df.set_index("Name", inplace = True)                             #INDEX is set as ("mercedez, tata...") instead of ("0, 1...")
print(df)

#Changing the HEADER of a COLUMN in a Data frame
df = df.rename( columns = {"CC" : "Capacity"})
print(df)                                                        #column name will be changed from "CC to Capcity"

#CONCATENATION of Data frames
con = pd.concat([df1, df2])                                      #prints all values of (HPI, int_rate, GDP) for all the index values from (2001 to 2008)
print(con) 

#DATA MUNGING (coversion of a file from an existing format to another format)
import pandas as pd
chan = pd.read_excel("C:/Users/Administrator/Downloads/Amco-china.xlsx", index_col=0)          #path name where the excel file exist, "index_col=0" means no change in data frame
chan.to_html("chang.html") 

#STATISTICS module
from statistics import mean                                      #to get mean of an observation
print(mean([1,2,1,3,4,8]))                                       #output- "3.16"

from statistics import median                                    #to get median of an observation
print(median([1,2,1,3,4,8]))                                     #output- "2.5"

from statistics import mode                                      #to get mode of an observation
print(mode([1,2,1,3,4,8]))                                       #output- "1"

from statistics import variance                                  #to get variance of an observation
print(variance([1,2,1,3,4,8]))                                   #output- "6.96"

#MATPLOTLIB
#Line graph (command- plot)
from matplotlib import pyplot as plt                             #import "pyplot"
plt.plot( [1,2,3], [4,5,1] )                                     #X-axis in the 1st list & Y-axis in the 2nd list
plt.show()                                                       #to print the output

from matplotlib import pyplot as plt
a33 = [5,8,10]                                                   #X-axis
b33 = [12,18,6]                                                  #Y-axis
plt.plot(a33, b33)                                               #plot 'X  vs Y'
plt.title("Test Plot")                                           #adding a title to the plot
plt.xlabel("X axis")                                             #adding 'X-axis' name
plt.ylabel("Y axis")                                             #adding 'Y-axis' name
plt.show()                                                       #to print the output

from matplotlib import pyplot as plt
a33 = [5,8,10]                                                   #x1
b33 = [12,18,6]                                                  #y1
a34 = [6,9,11]                                                   #x2
b34 = [6,15,7]                                                   #y2
plt.plot(a33, b33, "b", label="line 1", linewidth=5)             #plotting line 1 & naming it "line1", can see in graph by legend command
plt.plot(a34, b34, "r", label="line 2", linewidth=5)             #plotting "line 2"
plt.title("Test Lines")                                          #title of the graph
plt.xlabel("X-axis")                                               
plt.ylabel("Y-axis")
plt.legend()                                                     #to give info at the top right corner of the graph
plt.grid(True, color="k")                                        #to insert square "grid lines" in the graph, "black" color
plt.show()                                                       #print the graph

#Bar graphs (command- bar)
from matplotlib import pyplot as plt
plt.bar([1,3,5,7,9], [5,2,7,8,2], label="graph 1", color="b")    #X-axis & Y-axis values for "BAR graph 1"
plt.bar([2,4,6,8,10], [8,6,2,5,6], label="graph 2", color="r")   #X-axis & Y-axis values for "BAR graph 2"
plt.legend()                                                     #to give info at the top right corner of the graph          
plt.grid(True, color="k")                                        #grid lines with "black" color
plt.title("Test Bar graph")                                      #title of the graph
plt.xlabel("Number")
plt.ylabel("Height")
plt.show()                                                       #print output

#Histograms (command- hist)
from matplotlib import pyplot as plt
a35 = [35,55,62,45,21,34]                                        #X-axis
b35 = [0,10,20,30,40,50]                                         #Y-axis is always ("continuous and at a fixed interval") IN HISTOGRAM
plt.hist(a35, b35, histtype="bar", rwidth=0.5, label="Test")     #plotting histgram ("pyplot.hist")
plt.title("Test histogram")
plt.xlabel("X axis")
plt.ylabel("Y axis")
plt.legend()
plt.grid(True, color="k")
plt.show()

#Scatter plots (to see how 2 variables relate to each other)(command- scatter)
from matplotlib import pyplot as plt
a36 = [1,2,3,4,5,6,7,8]                                          #X-axis
b36 = [5,2,4,2,1,4,5,2]                                          #Y-axis
plt.scatter(a36, b36, label="Scatter", color="b")
plt.title("Test scatter plot")
plt.xlabel("X axis")
plt.ylabel("Y axis")
plt.legend()
plt.grid(True, color="k")
plt.show()                                                       #print the scatter plot

