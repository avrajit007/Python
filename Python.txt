i=10
print(i)                            #returns 10

x1=22
y1=11
z1=x1/y1
print(z1)                           #retuns 2

name= 'avrajit'
len(name)                           #returns 7, (note: INDEX starts from '0')
name[2]                             #returns 'r'
name.upper                          #for upper-case
name[-3]                            #returns 'j', shows 3rd letter from the last

mylist = [30, 20, "avra"]           #LIST named as 'mylist' created, 3rd bracket signifies list
print(mylist)
mylist[1]                           #returns 20, as in python index starts from '0'                       
mylist[1] = 99                      #replace 20 by 99
print(mylist)                       #output: 30, 99, 'avra'
mylist.append(10)                   #adds '10' at the end of the list, if printed shows 30, 99, 'avra', 10
mylist.insert (2, 1000)             #inserts '1000' in the 3rd position
mylist.reverse()                    #to get mirror image of the list

dictionary_course = {1: "Python",
                     2: "R",
                     3: "SQL"}      

print(dictionary_course)                     #DICTIONARY created in the name of 'dictionary_course', 2nd bracket for dictionary
dictionary_course[1]                         #returns 'Python'
dictionary_course.get(1)                     #returns 'Python
dictionary_course[4] = "Hadoop"              #adds 'Hadoop' in the 4th position of the dictionary

tuple_animal = (10, 20, "tiger", "lion", "tiger", "cat")              #TUPLE named 'tuple_animal' created
tuple_animal.count("tiger")                                           #returns 2

myset = {10, 20, 30, "tiger", "cat", 10}                              #created a set named 'myset', for set 2nd bracket is required
print(myset)                                                          #returns (20, 'tiger', 10, 'cat', 30)

#TYPE CONVERSION
int()                             #changes any datatype to 'integer'
float()                           #changes any datatype to 'float'
str()                             #changes any datatype to 'charecter string'
tuple()                           #changes any datatype to 'tuple'
list()                            #changes any datatype to 'list'
set()                             #changes any datatype to 'set'
dict()                            #changes any datatype to 'dictionary'

#example
x2 = 12
name = "avrajit"
print (str(x2) + name)            #returns '12avrajit'

#COLLECTIONS in Python
from collections import namedtuple                              #implementing a namedtuple
ax = namedtuple("courses", "course_name, software")             #'course_name' not 'course name' else error
sx = ax("data science", "python")
print(sx)                                                       #returns 'courses(course name="datascience", software="python)'

from collections import namedtuple                              #implementing namedtuple from a list
ax = namedtuple("courses", "course_name, software")
sy = ax._make(["artificial I", "python"])                       #3rd bracket means list
print(sy)                                                       #'underscore' before 'make' is mandatory, returns 'courses(course name="artificial I", software="python)'

from collections import deque                                   #implementing deque
ax1 = ["v", "r", "a", "j"]                                      #list created in the name of 'ax1'
sx1 = deque(ax1)                                                #coverting list into deque
print(sx1)                                                      #returns 'deque("v", "r", "a", "j")
sx1.append("i")                                                 #adds "i" at the end of the deque
sx1.appendleft("a")                                             #adds "a" in the begining
sx1.pop()                                                       #removes "i" from the end
sx1.popleft()                                                   #removes "a" from the begining

from collections import ChainMap                                #python is case sensitive, so write 'ChainMap' carefully
ax2 = {1:"avra", 2:"deepu"}                                      
ay2 = {3:"soumava", 4:"ankana"}                                 #2 dictionaries named ax2 & ay2 were created
sx2 = ChainMap(ax2, ay2)                                        #ChainMapped them into one
print(sx2)

from collections import Counter                                 #'C' of 'Counter' should be in upper-case
ax3 = [1,1,2,3,1,3,2,3,1,4,4,3,4,6,2]                           #list of numbers created with duplicate values
sx3 = Counter(ax3)                                              #to count number of '1, 2, 3, 4, 6' in decending order of repeatations
print(sx3)                                                      #returns 'Counter({1: 4, 3: 4, 2: 3, 4: 3, 6: 1})'
print(list(sx3.elements()))                                     #returns back all values present in the list, '[1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 6]'
print(sx3.most_common())                                        #returns '[(1, 4), (3, 4), (2, 3), (4, 3), (6, 1)]'
cx3 = {1:2, 3:1, 6:1}                                           #assigned a dictionary for using 'subtraction'
print(sx3.subtract(cx3))                                        #subtracting dictionary 'cx3' from 'sx3'
print(sx3.most_common())                                        #subtracted, o/p- '[(2, 3), (3, 3), (4, 3), (1, 2), (6, 0)]'

from collections import OrderedDict                             #'O' & 'D' should be in 'caps'
dx = OrderedDict()                                              #defined an OrderedDict as 'dx'
dx[1] = "a"
dx[2] = "v"
dx[3] = "r"
dx[4] = "a"
dx[5] = "j"
dx[6] = "i"
dx[7] = "t"
print(dx)
print(dx.keys())                                                #returns 'odict_keys([1, 2, 3, 4, 5, 6, 7])'
print(dx.items())                                               #returns 'odict_items([(1, 'a'), (2, 'v'), (3, 'r'), (4, 'a'), (5, 'j'), (6, 'i'), (7, 't')])'

