##COHORT ANALYSIS(CUSTOMER & REVENUE RETENSION)

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

df = pd.read_excel('e:/cohort.xlsx')
df['Service End'] = pd.to_datetime(df['Service End'])
df = df[(df['Service End'] >= '2018-04-01') & (df['Service End'] < '2021-10-01')]
df['First Order Month'] = df['First Order Date'].apply(lambda x: x.strftime('%Y-%m'))

grouped = df.groupby(['First Order Month', 'Service Month'])
cohorts = grouped.agg({'Customer': pd.Series.nunique,
                       'Service Month': "count",
                       'Taxable amount': np.sum})
cohorts.rename(columns={'Customer': 'Total_customers',
                        'Service Month': 'total_invoices'}, inplace=True)

def cohort_period(df):
    df['cohort_period'] = np.arange(len(df)) + 1
    return df
cohorts = cohorts.groupby(level=0).apply(cohort_period)

def cohort_heatmap(cohorts,col,title):
    size = group_size(cohorts,col)
    over_time = cohort_over_time(cohorts,size,col)
    _cohort_heatmap(over_time,title)
    
def group_size(cohorts,col):
    
    cohorts.reset_index(inplace=True)
    cohorts.set_index(['First Order Month', 'cohort_period'], inplace=True)
    return cohorts[col].groupby(level=0).first()

def cohort_over_time(cohorts,group_size,col):
    return cohorts[col].unstack(0).divide(group_size, axis=1)

def _cohort_heatmap(cohort_over_time,title):
    plt.figure(figsize=(35, 23.33))
    plt.title(title)
    sns.heatmap(cohort_over_time.T, mask=cohort_over_time.T.isnull(), annot=True, fmt='.0%')
    
cohort_heatmap(cohorts, "Total_customers", "Customer Retention")
cohort_heatmap(cohorts, "Taxable amount","Revenue Retention")



##CUSTOMER RETENTION TABLE

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import datetime as dt
df = pd.read_excel('e:/cohort.xlsx')
df['Service End'] = pd.to_datetime(df['Service End'])
df = df[(df['Service End'] >= '2018-04-01') & (df['Service End'] < '2021-10-01')]
df['First Order Month'] = df['First Order Date'].apply(lambda x: x.strftime('%Y-%m'))
def get_month(x): 
    return dt.datetime(x.year, x.month, 1) 
df['TransactionMonth'] = df['Service End'].apply(get_month) 
grouping = df.groupby('Customer')['TransactionMonth'] 
df['CohortMonth'] = grouping.transform('min')
def get_date_int(dff, column):
    year = dff[column].dt.year
    month = dff[column].dt.month
    day = dff[column].dt.day
    return year, month, day
transcation_year, transaction_month, _ = get_date_int(df, 'TransactionMonth')
cohort_year, cohort_month, _ = get_date_int(df, 'CohortMonth')
years_diff = transcation_year - cohort_year
months_diff = transaction_month - cohort_month
df['CohortIndex'] = years_diff * 12 + months_diff  + 1 
grouping = df.groupby(['CohortMonth', 'CohortIndex'])
cohort_data = grouping['Customer'].apply(pd.Series.nunique)
cohort_data = cohort_data.reset_index()
cohort_counts = cohort_data.pivot(index='CohortMonth',
                                 columns ='CohortIndex',
                                 values = 'Customer')
cohort_sizes = cohort_counts.iloc[:,0]
retention = cohort_counts.divide(cohort_sizes, axis=0)
f = retention.round(3)*100
excel = pd.ExcelWriter('Customer.xlsx', engine = 'xlsxwriter')
f.to_excel(excel, sheet_name = 'Sheet1')
excel.save()
